import axios from 'axios';

class ElevenLabsAgentService {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.baseUrl = 'https://api.elevenlabs.io/v1';
  }

  // Create a knowledge base document from book text
  async createKnowledgeBase(bookTitle, bookText, bookId) {
    try {
      console.log(`üìö Creating knowledge base for book: ${bookTitle}`);

      const response = await axios.post(
        `${this.baseUrl}/convai/knowledge-base/text`,
        {
          text: bookText,
          name: `${bookTitle} (Book ID: ${bookId})`
        },
        {
          headers: {
            'xi-api-key': this.apiKey,
            'Content-Type': 'application/json'
          }
        }
      );

      console.log(`‚úÖ Knowledge base created with ID: ${response.data.id}`);
      return response.data.id;
    } catch (error) {
      console.error('Error creating knowledge base:', error.response?.data || error.message);
      throw error;
    }
  }

  // Create an agent for the book with the knowledge base
  async createBookAgent(bookTitle, knowledgeBaseId) {
    try {
      console.log(`ü§ñ Creating agent for book: ${bookTitle}`);

      const response = await axios.post(
        `${this.baseUrl}/convai/agents/create`,
        {
          name: `${bookTitle} Assistant`,
          conversation_config: {
            agent: {
              prompt: {
                prompt: `Du √§r en hj√§lpsam assistent ENDAST f√∂r boken "${bookTitle}".

                VIKTIGT: Du ska ENDAST svara p√• fr√•gor om denna specifika bok och ENDAST anv√§nda
                information fr√•n bokens inneh√•ll. Om n√•gon fr√•gar om andra b√∂cker, f√∂rfattare,
                eller √§mnen som inte √§r direkt relaterade till "${bookTitle}", s√§g att du bara
                kan hj√§lpa med fr√•gor om denna bok.

                Du har tillg√•ng till hela bokens inneh√•ll och kan svara p√• fr√•gor om handlingen,
                karakt√§rerna, teman och detaljer. Du √§r s√§rskilt anpassad f√∂r att hj√§lpa l√§sare
                med dyslexi genom att ge tydliga, strukturerade svar med enkel spr√•kbruk.

                Viktiga principer:
                - Anv√§nd ENDAST information fr√•n "${bookTitle}"
                - S√§g tydligt om n√•got inte finns i denna bok
                - Anv√§nd enkelt och tydligt spr√•k
                - Dela upp l√•nga svar i kortare stycken
                - Ge konkreta exempel fr√•n boken
                - Var t√•lmodig och uppmuntrande
                - Hj√§lp l√§saren att f√∂rst√• och njuta av boken
                - Om fr√•gan inte handlar om "${bookTitle}", h√§nvisa tillbaka till boken`,
                knowledge_base: [knowledgeBaseId]
              },
              language: 'sv',
              voice: 'iwNZQzqCFIBqLR6sgFpN' // Same voice as TTS
            }
          },
          tags: ['book-assistant', 'dyslexia-friendly', bookTitle.toLowerCase().replace(/\s+/g, '-')]
        },
        {
          headers: {
            'xi-api-key': this.apiKey,
            'Content-Type': 'application/json'
          }
        }
      );

      console.log(`‚úÖ Agent created with ID: ${response.data.agent_id}`);
      return response.data.agent_id;
    } catch (error) {
      console.error('Error creating agent:', error.response?.data || error.message);
      throw error;
    }
  }

  // Get widget configuration for embedding
  async getWidgetConfig(agentId) {
    try {
      console.log(`üì± Getting widget config for agent: ${agentId}`);

      const response = await axios.get(
        `${this.baseUrl}/convai/agents/${agentId}/widget`,
        {
          headers: {
            'xi-api-key': this.apiKey
          }
        }
      );

      return response.data;
    } catch (error) {
      console.error('Error getting widget config:', error.response?.data || error.message);
      throw error;
    }
  }

  // Get or create an agent for a book
  async setupBookAgent(bookId, bookTitle, bookText) {
    try {
      // First check if agent already exists for this book
      // (You might want to store agent IDs in your database)

      // Create knowledge base
      const knowledgeBaseId = await this.createKnowledgeBase(bookTitle, bookText, bookId);

      // Create agent with knowledge base
      const agentId = await this.createBookAgent(bookTitle, knowledgeBaseId);

      // Get widget configuration
      const widgetConfig = await this.getWidgetConfig(agentId);

      return {
        agentId,
        knowledgeBaseId,
        widgetConfig
      };
    } catch (error) {
      console.error('Error setting up book agent:', error);
      throw error;
    }
  }

  // List all knowledge bases
  async listKnowledgeBases() {
    try {
      const response = await axios.get(
        `${this.baseUrl}/convai/knowledge-base`,
        {
          headers: {
            'xi-api-key': this.apiKey
          }
        }
      );

      return response.data.documents;
    } catch (error) {
      console.error('Error listing knowledge bases:', error.response?.data || error.message);
      throw error;
    }
  }
}

export default ElevenLabsAgentService;